onOnline = (() => {
  document.querySelector("body").classList.remove("offline"), DBHelper.getOfflineReviews().then(e => {
    DBHelper.clearOfflineReviews().then(() => {
      e.forEach(e => postReview(e.data))
    })
  })
}), onOffline = (() => {
  document.querySelector("body").classList.add("offline")
}), postReview = (e => {
  const t = new Headers;
  t.set("Accept", "application/json");
  const r = new FormData;
  for (const t in e) e.hasOwnProperty(t) && r.append(t, e[t]);
  fetch("http://localhost:1337/reviews/", {
    method: "POST",
    headers: t,
    body: r
  }).then(e => e.json()).then(e => {
    e.restaurant_id = parseInt(e.restaurant_id), e.rating = parseInt(e.rating), DBHelper.updateReviews(e.restaurant_id)
  }).catch(t => {
    console.error(t), DBHelper.storeOfflineReview(e)
  })
}), window.addEventListener("online", onOnline), window.addEventListener("offline", onOffline), "serviceWorker" in navigator && window.addEventListener("load", function () {
  navigator.serviceWorker.register("service-worker.js", {
    scope: "/"
  }).then(function (e) {
    console.log("ServiceWorker registration successful with scope: ", e.scope)
  }).catch(function (e) {
    console.log("ServiceWorker registration failed: error:", e)
  })
});