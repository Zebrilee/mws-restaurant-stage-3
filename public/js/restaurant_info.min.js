let restaurant;
var newMap;
document.addEventListener("DOMContentLoaded", e => {
  initMap()
}), initMap = (() => {
  fetchRestaurantFromURL().then(e => {
    self.newMap = L.map("map", {
      center: [e.latlng.lat, e.latlng.lng],
      zoom: 16,
      scrollWheelZoom: !1
    }), L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}", {
      mapboxToken: "pk.eyJ1IjoiemVicmlsZWUiLCJhIjoiY2ppejlzMHZvMDR0ejN3bHoyZXFub21lMCJ9.ZgeOqjoMglGD2nZS7mNOxg",
      maxZoom: 18,
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
      id: "mapbox.streets"
    }).addTo(newMap), DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap)
  }).catch(e => console.error(e))
}), fetchRestaurantFromURL = (() => new Promise((e, t) => {
  if (self.restaurant) return e(self.restaurant);
  const r = getParameterByName("id");
  if (!r) return error = "No restaurant id in URL", t(error);
  DBHelper.fetchRestaurantById(r, (r, n) => {
    if (self.restaurant = n, !n) return console.error(r), t(r);
    DBHelper.getReviews(self.restaurant.id).then(t => (self.restaurant.reviews = t, e(self.restaurant))).catch(e => t(e))
  })
})), submitReviewForm = (() => {
  const e = {},
    t = document.getElementById("review-form");
  for (let r = 0; r < t.length; ++r) {
    let n = t[r].name,
      a = t[r].value;
    "" !== n && "" !== a && ("restaurant_id" !== n && "rating" !== n || (a = parseInt(a)), e[t[r].name] = a)
  }
  t.reset(), postReview(e)
}), fillRestaurantHTML = ((e = self.restaurant) => {
  document.getElementById("restaurant-name").innerHTML = e.name, document.getElementById("restaurant-address").innerHTML = e.address;
  const t = document.getElementById("restaurant-img");
  t.className = "restaurant-img", t.alt = e.name + " Restaurant", t.src = DBHelper.imageUrlForRestaurant(e);
  const r = document.getElementById("picture-small");
  r.srcset = DBHelper.smallImageUrlForRestaurant(e), r.media = "(max-width: 450px)";
  const n = document.getElementById("picture-large");
  n.srcset = DBHelper.imageUrlForRestaurant(e), n.media = "(min-width: 451px)", document.getElementById("restaurant-cuisine").innerHTML = e.cuisine_type, e.operating_hours && fillRestaurantHoursHTML(), fillReviewsHTML()
}), fillRestaurantHoursHTML = ((e = self.restaurant.operating_hours) => {
  const t = document.getElementById("restaurant-hours");
  for (let r in e) {
    const n = document.createElement("tr"),
      a = document.createElement("td");
    a.innerHTML = r, n.appendChild(a);
    const s = document.createElement("td");
    s.innerHTML = e[r], n.appendChild(s), t.appendChild(n)
  }
}), fillReviewsHTML = ((e = self.restaurant.reviews) => {
  const t = document.getElementById("reviews-container"),
    r = document.createElement("h2");
  if (r.innerHTML = "Reviews", r.setAttribute("aria-level", "2"), r.setAttribute("role", "heading"), r.setAttribute("tabindex", "0"), t.appendChild(r), !e) {
    const e = document.createElement("p");
    return e.innerHTML = "No reviews yet!", void t.appendChild(e)
  }
  const n = document.getElementById("reviews-list");
  e.forEach(e => {
    n.appendChild(createReviewHTML(e))
  }), t.appendChild(n)
}), createReviewHTML = (e => {
  const t = document.createElement("li"),
    r = document.createElement("p"),
    n = document.createElement("div");
  r.innerHTML = e.name, r.classList.add("reviewer"), n.appendChild(r);
  const a = document.createElement("p");
  a.innerHTML = formatDate(e.createdAt), a.classList.add("review-date"), n.appendChild(a), t.appendChild(n);
  const s = document.createElement("p");
  s.innerHTML = `Rating: ${e.rating}`, s.classList.add("review-rating"), t.appendChild(s);
  const o = document.createElement("p");
  return o.innerHTML = e.comments, t.appendChild(o), t
}), fillBreadcrumb = ((e = self.restaurant) => {
  const t = document.getElementById("breadcrumb"),
    r = document.createElement("li");
  r.innerHTML = e.name, t.appendChild(r)
}), getParameterByName = ((e, t) => {
  t || (t = window.location.href), e = e.replace(/[\[\]]/g, "\\$&");
  const r = new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);
  return r ? r[2] ? decodeURIComponent(r[2].replace(/\+/g, " ")) : "" : null
}), formatDate = (e => {
  const t = new Date(e);
  return t.getDate() + "/" + (t.getMonth() + 1) + "/" + t.getFullYear()
}), fetchRestaurantFromURL().then(e => {
  DBHelper.getReviews(e.id), document.getElementById("restaurant_id").value = e.id, fillBreadcrumb(), document.getElementById("review-form").addEventListener("submit", function (e) {
    e.preventDefault(), submitReviewForm()
  }), document.addEventListener("reviews_updated", e => {
    console.log("Got reviews updated event", e), console.log("current restaurant", self.restaurant), e.detail.restaurant_id === self.restaurant.id && (console.log("Updating review list"), DBHelper.getReviews(self.restaurant.id).then(e => {
      self.restaurant.reviews = e, fillReviewsHTML(e)
    }))
  })
}).then(fillRestaurantHTML).catch(e => {
  console.error("Init Error: ", e)
}), favouriteRestaurant = (() => {
  self.restaurant.is_favorite = !self.bool_favouriteImage, toggle_favouriteimage(self.restaurant.is_favorite);
  const e = "http://localhost:1337/restaurants/" + self.restaurant.id + "/?is_favorite=" + self.restaurant.is_favorite;
  var t = new Headers;
  t.set("Accept", "application/json"), fetch(e, {
    method: "PUT",
    headers: t
  }).then(DBHelper.updateRestaurants)
}), toggle_favouriteimage = (e => {
  var t = document.getElementById("FavouriteIcon");
  e ? (t.setAttribute("src", "img/favourite.png"), self.bool_favouriteImage = !0) : (t.setAttribute("src", "img/unfavourite.png"), self.bool_favouriteImage = !1)
});
