let restaurant;
var newMap;

/**
 * Initialize map as soon as the page is loaded.
 */
document.addEventListener('DOMContentLoaded', (event) => {
  initMap();
});

/**
 * Initialize leaflet map
 */
initMap = () => {
  fetchRestaurantFromURL()
  .then(restaurant => {
    self.newMap = L.map('map', {
      center: [restaurant.latlng.lat, restaurant.latlng.lng],
      zoom: 16,
      scrollWheelZoom: false
    });
    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {
      mapboxToken: "pk.eyJ1IjoiemVicmlsZWUiLCJhIjoiY2ppejlzMHZvMDR0ejN3bHoyZXFub21lMCJ9.ZgeOqjoMglGD2nZS7mNOxg",
      maxZoom: 18,
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
      id: "mapbox.streets"
    }).addTo(newMap);
    DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);
  })
  .catch(error => console.error(error));
}
/**
 * Get current restaurant from page URL.
 */
fetchRestaurantFromURL = () => {
  return new Promise((resolve, reject) => {
    if (self.restaurant) { // restaurant already fetched!
      return resolve(self.restaurant)
    }
    const id = getParameterByName('id');
    if (!id) { // no id found in URL
      error = 'No restaurant id in URL'
      return reject(error);
    } else {
      DBHelper.fetchRestaurantById(id, (error, restaurant) => {
        self.restaurant = restaurant;
        if (!restaurant) {
          console.error(error);
          return reject(error);
        }
        DBHelper.getReviews(self.restaurant.id)
        .then((reviews) => {
          self.restaurant.reviews = reviews;
          return resolve(self.restaurant);
        }).catch(e => {
          return reject(e);
        })
      });
    }
  });
}

/**
 * Gathers values from the form and submit to the backend server
 */
submitReviewForm = () => {

  const review = {};
  const formData = document.getElementById('review-form');
  for (let i = 0; i < formData.length; ++i) {
    let fieldName = formData[i].name;
    let value = formData[i].value;
    if (fieldName === "" || value === "") continue;
    if (fieldName === "restaurant_id" || fieldName === "rating") {
      value = parseInt(value);
    }
    review[formData[i].name] = value;
  }
  formData.reset();

  postReview(review);
}
/**
 * Create restaurant HTML and add it to the webpage
 */
fillRestaurantHTML = (restaurant = self.restaurant) => {
  const name = document.getElementById('restaurant-name');
  name.innerHTML = restaurant.name;

  const address = document.getElementById('restaurant-address');
  address.innerHTML = restaurant.address;

  const image = document.getElementById('restaurant-img');
  image.className = 'restaurant-img';
  image.alt = restaurant.name + ' Restaurant';
  image.src = DBHelper.imageUrlForRestaurant(restaurant);

  /* add two sources with srcset and media for the picture tag */
  const sourceSmall = document.getElementById('picture-small');
  sourceSmall.srcset = DBHelper.smallImageUrlForRestaurant(restaurant);
  sourceSmall.media = '(max-width: 450px)';

  const sourceLarge = document.getElementById('picture-large');
  sourceLarge.srcset = DBHelper.imageUrlForRestaurant(restaurant);
  sourceLarge.media = '(min-width: 451px)';


  const cuisine = document.getElementById('restaurant-cuisine');
  cuisine.innerHTML = restaurant.cuisine_type;

  // fill operating hours
  if (restaurant.operating_hours) {
    fillRestaurantHoursHTML();
  }
  // fill reviews
  fillReviewsHTML();
}

/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */
fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {
  const hours = document.getElementById('restaurant-hours');
  for (let key in operatingHours) {
    const row = document.createElement('tr');

    const day = document.createElement('td');
    day.innerHTML = key;
    row.appendChild(day);

    const time = document.createElement('td');
    time.innerHTML = operatingHours[key];
    row.appendChild(time);

    hours.appendChild(row);
  }
}


/**
 * Create all reviews HTML and add them to the webpage.
 */
fillReviewsHTML = (reviews = self.restaurant.reviews) => {
  const container = document.getElementById('reviews-container');
  const title = document.createElement('h2');
  title.innerHTML = 'Reviews';
  title.setAttribute('aria-level', '2');
  title.setAttribute('role', 'heading');
  title.setAttribute('tabindex', '0')

  container.appendChild(title);

  if (!reviews) {
    const noReviews = document.createElement('p');
    noReviews.innerHTML = 'No reviews yet!';
    container.appendChild(noReviews);
    return;
  }
  const ul = document.getElementById('reviews-list');
  reviews.forEach(review => {
    ul.appendChild(createReviewHTML(review));
  });
  container.appendChild(ul);
}

/**
 * Create review HTML and add it to the webpage.
 */
createReviewHTML = (review) => {
  const li = document.createElement('li');
  const name = document.createElement('p');
  const div = document.createElement('div');
  name.innerHTML = review.name;
  name.classList.add("reviewer");
  div.appendChild(name);

  const date = document.createElement('p');
  date.innerHTML = formatDate(review.createdAt);
  date.classList.add("review-date");
  div.appendChild(date);
  li.appendChild(div);

  const rating = document.createElement('p');
  rating.innerHTML = `Rating: ${review.rating}`;
  rating.classList.add("review-rating");
  li.appendChild(rating);

  const comments = document.createElement('p');
  comments.innerHTML = review.comments;
  li.appendChild(comments);

  return li;
}

/**
 * Add restaurant name to the breadcrumb navigation menu
 */
fillBreadcrumb = (restaurant = self.restaurant) => {
  const breadcrumb = document.getElementById('breadcrumb');
  const li = document.createElement('li');
  li.innerHTML = restaurant.name;
  breadcrumb.appendChild(li);
}

/**
 * Get a parameter by name from page URL.
 */
getParameterByName = (name, url) => {
  if (!url)
    url = window.location.href;
  name = name.replace(/[\[\]]/g, '\\$&');
  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),
    results = regex.exec(url);
  if (!results)
    return null;
  if (!results[2])
    return '';
  return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

/**
 * Add a function to format the date in the review
 */
formatDate = (dates) => {
  const date = new Date(dates);
  return date.getDate() +'/' + (date.getMonth() + 1) + '/' + date.getFullYear();
}


/**
 * set it up
 */
(()=> {
  fetchRestaurantFromURL()
  .then((restaurant) => {
    DBHelper.getReviews(restaurant.id);
    document.getElementById("restaurant_id").value = restaurant.id;
    fillBreadcrumb();
    var form = document.getElementById('review-form');
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      submitReviewForm();
    })

    document.addEventListener("reviews_updated", e => {
      console.log("Got reviews updated event",e);
      console.log("current restaurant",self.restaurant);
      if (e.detail.restaurant_id === self.restaurant.id) {
        console.log("Updating review list");
        DBHelper.getReviews(self.restaurant.id).then(reviews => {
          self.restaurant.reviews = reviews;
          fillReviewsHTML(reviews);
        })
      }
    });
  })
  .then(fillRestaurantHTML)
  .catch((error) => {
    console.error('Init Error: ', error);
  });
})();

/**
 * favourite  or unfavorite the restaurant
 */

favouriteRestaurant = () => {
  self.restaurant.is_favorite = !self.bool_favouriteImage;
  toggle_favouriteimage(self.restaurant.is_favorite) ;
  const url = "http://localhost:1337/restaurants/" + self.restaurant.id + "/?is_favorite=" + (self.restaurant.is_favorite);

  var headers = new Headers();
  headers.set('Accept', 'application/json');
  var fetchOptions = {
    method: 'PUT',
    headers
  };
  fetch(url, fetchOptions)
  .then(DBHelper.updateRestaurants);
} ;

toggle_favouriteimage = (is_favorite) => {
  var favorite = document.getElementById('FavouriteIcon');
  if (is_favorite) {
    favorite.setAttribute('src' , "img/favourite.png");
    self.bool_favouriteImage = true ;
  }
  else
  {
    favorite.setAttribute('src' , "img/unfavourite.png");
    self.bool_favouriteImage = false ;
  }

}
/**
 *
 * Now we deal with the online/ offline case
 */

/**
 * Event method set when solution goes online
 * check that any offline reviews are submitted to the server
 */
onOnline = () => {
  document.querySelector('body').classList.remove('offline');
  DBHelper.getOfflineReviews().then(reviews => {
    DBHelper.clearOfflineReviews().then(() => {
      reviews.forEach((review) => postReview(review.data));
    })
  });
}

/**
 * we do the same but when it goes offline
 * Adds a visual indication that we are offline on the website
 */
onOffline = () => {
  document.querySelector('body').classList.add('offline');
}

/**
 * Submit a review to the server and store it offline if it fails.
 */
postReview = (pReview) => {
  const headers = new Headers();
  // here we want JSON back
  headers.set('Accept', 'application/json');
  const data = new FormData();

  for (const k in pReview){
    if (pReview.hasOwnProperty(k)) {
      data.append(k,pReview[k]);
    }
  }

  const url = 'http://localhost:1337/reviews/';
  const fetchOptions = {
    method: 'POST',
    headers,
    body: data
  };

  const responsePromise = fetch(url, fetchOptions);
  responsePromise.then((response) => response.json())
  .then(review => {
    review.restaurant_id = parseInt(review.restaurant_id);
    review.rating = parseInt(review.rating);
    DBHelper.updateReviews(review.restaurant_id)
  }).catch(e => {
    console.error(e);
    DBHelper.storeOfflineReview(pReview);
  })
}

window.addEventListener('online',  onOnline);
window.addEventListener('offline', onOffline);

/**
 * Add a service worker.
 */

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function () {
    navigator.serviceWorker.register('service-worker.js', {
        scope: '/'
      })
      .then(function (registration) {
        // Registration was successful
        console.log('ServiceWorker registration successful with scope: ', registration.scope);
      }).catch(function (error) {
        console.log('ServiceWorker registration failed: error:', error);
      })
  });
}