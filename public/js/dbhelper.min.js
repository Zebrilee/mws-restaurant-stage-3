class DBHelper{static get DATABASE_URL(){return"http://localhost:1337"}static openDatabase(){return idb.open("withReviewDB",4,function(e){switch(e.oldVersion){case 0:const t=e.createObjectStore("restaurants",{keyPath:"id"});t.createIndex("cuisine","cuisine_type"),t.createIndex("neighborhood","neighborhood");case 1:console.log("with reviews"),e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant","restaurant_id");case 2:e.createObjectStore("offline_reviews",{keyPath:"id"})}})}static getRestaurants(){return new Promise((e,t)=>{DBHelper.openDatabase().then(a=>{a.transaction("restaurants").objectStore("restaurants").getAll().then(a=>{a&&a.length>0?e(a):DBHelper.updateRestaurants().then(t=>{e(t)}).catch(t)})}).catch(t)})}static getReviews(e){return new Promise((t,a)=>{DBHelper.openDatabase().then(r=>{r.transaction("reviews").objectStore("reviews").index("restaurant").getAll(e).then(r=>{r&&r.length>0?t(r):DBHelper.updateReviews(e).then(e=>{t(e)}).catch(a)})}).catch(a)})}static updateReviews(e){return new Promise((t,a)=>{fetch(DBHelper.DATABASE_URL+"/reviews?restaurant_id="+e).then(a=>{a.json().then(a=>{DBHelper.openDatabase().then(e=>{const t=e.transaction("reviews","readwrite").objectStore("reviews");a.forEach(e=>{e.restaurant_id=parseInt(e.restaurant_id),e.rating=parseInt(e.rating),t.put(e)})});const r=new CustomEvent("reviews_updated",{detail:{restaurant_id:e}});return document.dispatchEvent(r),t(a)})})})}static storeOfflineReview(e){DBHelper.openDatabase().then(t=>{t.transaction("offline_reviews","readwrite").objectStore("offline_reviews").add({id:Date.now(),data:e})})}static getOfflineReviews(){return new Promise((e,t)=>{DBHelper.openDatabase().then(a=>{a.transaction("offline_reviews").objectStore("offline_reviews").getAll().then(t=>e(t)).catch(e=>{t(e)})})})}static clearOfflineReviews(){return new Promise((e,t)=>{DBHelper.openDatabase().then(t=>{return t.transaction("offline_reviews","readwrite").objectStore("offline_reviews").clear(),e()}).catch(t)})}static updateRestaurants(){return new Promise((e,t)=>{fetch(DBHelper.DATABASE_URL+"/restaurants").then(t=>{t.json().then(t=>(DBHelper.openDatabase().then(e=>{var a=e.transaction("restaurants","readwrite").objectStore("restaurants");t.forEach(e=>{a.put(e)})}),DBHelper.updateReviews(),e(t)))})})}static fetchRestaurantById(e,t){DBHelper.openDatabase().then(a=>{a.transaction("restaurants").objectStore("restaurants").get(parseInt(e)).then(e=>{t(null,e)}).catch(e=>{t(e,null)})})}static fetchReviewsForRestaurantId(e){return new Promise((t,a)=>{DBHelper.openDatabase().then(a=>{return a.transaction("reviews").objectStore("reviews").index("restaurant").getAll(parseInt(e)).then(t).catch(e=>{console.error("Could not get reviews for Restaurant",e),t([])})})})}static fetchRestaurantByCuisine(e,t){DBHelper.openDatabase().then(t=>{return t.transaction("restaurants").objectStore("restaurants").index("cuisine").get(e)}).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantByNeighborhood(e,t){DBHelper.openDatabase().then(t=>{return t.transaction("restaurants").objectStore("restaurants").index("neighborhood").get(e)}).then(e=>{t(null,e)}).catch(e=>{t(e,null)})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a){DBHelper.getRestaurants().then(r=>{"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),a(null,r)}).catch(e=>{a(e,null)})}static fetchNeighborhoods(e){DBHelper.getRestaurants().then(t=>{const a=t.map((e,a)=>t[a].neighborhood),r=a.filter((e,t)=>a.indexOf(e)==t);e(null,r)})}static fetchCuisines(e){DBHelper.getRestaurants().then(t=>{const a=t.map((e,a)=>t[a].cuisine_type),r=a.filter((e,t)=>a.indexOf(e)==t);e(null,r)})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e.photograph?`/img/${e.photograph}.jpg`:`/img/${e.id}.jpg`}static smallImageUrlForRestaurant(e){return e.photograph?`/img/small-${e.photograph}.jpg`:`/img/small-${e.id}.jpg`}static mapMarkerForRestaurant(e,t){const a=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return a.addTo(newMap),a}}